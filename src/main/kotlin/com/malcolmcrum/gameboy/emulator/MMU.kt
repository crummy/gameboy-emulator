package com.malcolmcrum.gameboy.emulator

import com.malcolmcrum.gameboy.util.hex
import mu.KotlinLogging

@ExperimentalUnsignedTypes
class MMU(val interrupts: Interrupts = Interrupts(),
          val joypad: Joypad = Joypad(),
          val gpu: GPU = GPU(),
          val lcd: LCD = LCD(),
          val timer: Timer = Timer(interrupts),
          val div: DIV = DIV(),
          val serial: Serial = Serial()
) {
    private val log = KotlinLogging.logger {}

    var inBios = true // bios is unmapped soon after boot

    val bios = UByteArray(256)
    val rom = UByteArray(0x8000)
    val workingRam = UByteArray(0x4000) // working ram
    val externalRam = UByteArray(0x2000) // external ram
    val zram = UByteArray(0x80) // high speed ram?
    val oam = UByteArray(0xA0) // object attribute memory

    init {
        arrayOf(0x31, 0xfe, 0xff, 0xaf, 0x21, 0xff, 0x9f, 0x32, 0xcb, 0x7c, 0x20, 0xfb, 0x21, 0x26, 0xff, 0x0e,
                0x11, 0x3e, 0x80, 0x32, 0xe2, 0x0c, 0x3e, 0xf3, 0xe2, 0x32, 0x3e, 0x77, 0x77, 0x3e, 0xfc, 0xe0,
                0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1a, 0xcd, 0x95, 0x00, 0xcd, 0x96, 0x00, 0x13, 0x7b,
                0xfe, 0x34, 0x20, 0xf3, 0x11, 0xd8, 0x00, 0x06, 0x08, 0x1a, 0x13, 0x22, 0x23, 0x05, 0x20, 0xf9,
                0x3e, 0x19, 0xea, 0x10, 0x99, 0x21, 0x2f, 0x99, 0x0e, 0x0c, 0x3d, 0x28, 0x08, 0x32, 0x0d, 0x20,
                0xf9, 0x2e, 0x0f, 0x18, 0xf3, 0x67, 0x3e, 0x64, 0x57, 0xe0, 0x42, 0x3e, 0x91, 0xe0, 0x40, 0x04,
                0x1e, 0x02, 0x0e, 0x0c, 0xf0, 0x44, 0xfe, 0x90, 0x20, 0xfa, 0x0d, 0x20, 0xf7, 0x1d, 0x20, 0xf2,
                0x0e, 0x13, 0x24, 0x7c, 0x1e, 0x83, 0xfe, 0x62, 0x28, 0x06, 0x1e, 0xc1, 0xfe, 0x64, 0x20, 0x06,
                0x7b, 0xe2, 0x0c, 0x3e, 0x87, 0xe2, 0xf0, 0x42, 0x90, 0xe0, 0x42, 0x15, 0x20, 0xd2, 0x05, 0x20,
                0x4f, 0x16, 0x20, 0x18, 0xcb, 0x4f, 0x06, 0x04, 0xc5, 0xcb, 0x11, 0x17, 0xc1, 0xcb, 0x11, 0x17,
                0x05, 0x20, 0xf5, 0x22, 0x23, 0x22, 0x23, 0xc9, 0xce, 0xed, 0x66, 0x66, 0xcc, 0x0d, 0x00, 0x0b,
                0x03, 0x73, 0x00, 0x83, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x08, 0x11, 0x1f, 0x88, 0x89, 0x00, 0x0e,
                0xdc, 0xcc, 0x6e, 0xe6, 0xdd, 0xdd, 0xd9, 0x99, 0xbb, 0xbb, 0x67, 0x63, 0x6e, 0x0e, 0xec, 0xcc,
                0xdd, 0xdc, 0x99, 0x9f, 0xbb, 0xb9, 0x33, 0x3e, 0x3c, 0x42, 0xb9, 0xa5, 0xb9, 0xa5, 0x42, 0x3c,
                0x21, 0x04, 0x01, 0x11, 0xa8, 0x00, 0x1a, 0x13, 0xbe, 0x20, 0xfe, 0x23, 0x7d, 0xfe, 0x34, 0x20,
                0xf5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xfb, 0x86, 0x20, 0xfe, 0x3e, 0x01, 0xe0, 0x50)
                .forEachIndexed { index, byte -> bios[index] = byte.toUByte() }
    }

    fun load(vararg game: UByte) {
        inBios = false
        game.copyInto(rom)
        println()
    }

    operator fun get(addr: UInt): UByte {
        assert(addr <= 0xFFFFu)
        return get(addr.toUShort())
    }

    operator fun get(address: UShort): UByte {
        val value = when(address) {
            in (0x0000u..0x1000u) -> {
                if (address == 0x0100u.toUShort()) inBios = false
                if (inBios) bios[address] else rom[address]
            }
            in (0x1000u until 0x8000u) -> rom[address]
            in (0x8000u until 0xA000u) -> gpu[address]
            in (0xA000u until 0xC000u) -> externalRam[address and 0x1FFFu]
            in (0xC000u until 0xE000u) -> workingRam[address and 0x1FFFu]
            in (0xE000u until 0xFE00u) -> workingRam[address and 0x1FFFu] // working ram shadow
            in (0xFE00u until 0xFEA0u) -> oam[address and 0xFFu]
            in (0xFEA0u until 0xFF00u) -> 0u
            0xFF00u.toUShort() -> joypad.flags
            in (0xFF01u..0xFF02u) -> serial[address]
            0xFF04u.toUShort() -> div.value
            in (0xFF05u..0xFF07u) -> timer[address]
            0xFF0Fu.toUShort() -> interrupts[address]
            in (0xFF01u until 0xFF40u) -> TODO() // io control handling
            in (0xFF40u..0xFF4Bu) -> lcd[address and 0xFFu]
            in (0xFF80u until 0xFFFFu) -> zram[address and 0x7Fu]
            0xFFFFu.toUShort() -> interrupts[address]
            else -> throw ArrayIndexOutOfBoundsException(address.toString())
        }
        log.trace { "mmu[${address.hex()}] contains ${value.hex()}"}
        return value
    }

    operator fun set(address: UInt, value: UByte) {
        assert(address <= 0xFFFFu)
        set(address.toUShort(), value)
    }

    operator fun set(address: UShort, value: UByte) {
        log.trace { "mmu[${address.hex()}] <= ${value.hex()}"}
        when(address) {
            in (0x0000u..0x1000u) -> {
                if (inBios) throw IllegalAccessException("Cannot write to BIOS")
                else rom[address] = value
            }
            in (0x1000u until 0x8000u) -> rom[address] = value
            in (0x8000u until 0xA000u) -> gpu[address and 0x1FFFu] = value
            in (0xA000u until 0xC000u) -> externalRam[address and 0x1FFFu] = value
            in (0xC000u until 0xE000u) -> workingRam[address and 0x1FFFu] = value
            in (0xE000u until 0xFE00u) -> workingRam[address and 0x1FFFu] = value
            in (0xFE00u until 0xFEA0u) -> oam[address and 0xFFu] = value
            in (0xFEA0u until 0xFF00u) -> throw IllegalAccessException(address.hex())
            0xFF00u.toUShort() -> joypad.flags = value
            in (0xFF01u..0xFF02u) -> serial[address] = value
            0xFF04u.toUShort() -> div.value = value
            in (0xFF05u..0xFF07u) -> timer[address] = value
            0xFF0Fu.toUShort() -> interrupts[address] = value
            in (0xFF03u until 0xFF40u) -> throw IllegalAccessException(address.hex())
            in (0xff40u..0xff4bu) -> lcd[address and 0xffu] = value
            in (0xFF80u until 0xFFFFu) -> zram[address and 0x7Fu] = value
            0xFFFFu.toUShort() -> interrupts[address] = value
            else -> throw ArrayIndexOutOfBoundsException(address.hex())
        }
    }
}

@ExperimentalUnsignedTypes
private operator fun UByteArray.set(address: UShort, value: UByte) {
    set(address.toInt(), value)
}

@ExperimentalUnsignedTypes
private operator fun UByteArray.get(address: UShort): UByte {
    return get(address.toInt())
}